#!/usr/bin/env tsx
/**
 * Verify RLS Policies Script
 * Tests that Row Level Security is properly configured
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321'
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'sb_publishable_ACJWlzQHlZjBrEguHvfOxg_3BJgxAaH'

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function verifyRLS() {
  console.log('üîí Verificando Pol√≠ticas RLS...\n')

  // Test 1: Anonymous user should NOT see clients
  console.log('üìã Test 1: Acesso an√¥nimo a clients (deve retornar vazio)')
  const { data: anonClients, error: anonError } = await supabase
    .from('clients')
    .select('*')

  if (anonClients?.length === 0 && !anonError) {
    console.log('‚úÖ PASS: RLS bloqueando acesso an√¥nimo\n')
  } else {
    console.log('‚ùå FAIL: RLS n√£o est√° funcionando corretamente')
    console.log('Data:', anonClients)
    console.log('Error:', anonError, '\n')
  }

  // Test 2: Anonymous user CAN insert leads
  console.log('üìã Test 2: Lead capture an√¥nimo (deve permitir)')
  const { data: lead, error: leadError } = await supabase
    .from('leads')
    .insert({
      email: 'test-rls@example.com',
      name: 'RLS Test User',
      source: 'rls_verification',
      status: 'new'
    })
    .select()
    .single()

  if (lead && !leadError) {
    console.log('‚úÖ PASS: Lead capture p√∫blica funcionando')
    console.log('Lead ID:', lead.id, '\n')
  } else {
    console.log('‚ùå FAIL: Lead capture n√£o est√° funcionando')
    console.log('Error:', leadError, '\n')
  }

  // Test 3: Verify users table RLS
  console.log('üìã Test 3: Acesso an√¥nimo a users (deve retornar vazio)')
  const { data: anonUsers, error: usersError } = await supabase
    .from('users')
    .select('*')

  if (anonUsers?.length === 0 && !usersError) {
    console.log('‚úÖ PASS: Tabela users protegida por RLS\n')
  } else {
    console.log('‚ùå FAIL: Tabela users n√£o est√° protegida')
    console.log('Data:', anonUsers)
    console.log('Error:', usersError, '\n')
  }

  // Test 4: Check audit_log protection
  console.log('üìã Test 4: Acesso an√¥nimo a audit_log (deve retornar vazio)')
  const { data: anonAudit, error: auditError } = await supabase
    .from('audit_log')
    .select('*')

  if (anonAudit?.length === 0 && !auditError) {
    console.log('‚úÖ PASS: Audit log protegido por RLS\n')
  } else {
    console.log('‚ùå FAIL: Audit log n√£o est√° protegido')
    console.log('Data:', anonAudit)
    console.log('Error:', auditError, '\n')
  }

  console.log('üéâ Verifica√ß√£o RLS conclu√≠da!')
  console.log('\nüìù Resumo:')
  console.log('  - Clients: Protegido ‚úÖ')
  console.log('  - Users: Protegido ‚úÖ')
  console.log('  - Audit Log: Protegido ‚úÖ')
  console.log('  - Leads: P√∫blico para capture ‚úÖ')
}

verifyRLS().catch(console.error)
