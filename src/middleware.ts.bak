import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

/**
 * Enhanced secure authentication middleware with robust security controls
 * 
 * Features:
 * - Security headers
 * - API route handling
 * - Auth endpoints support
 */
export function middleware(req: NextRequest) {
  // Special handling for auth API routes to prevent 405 errors
  if (req.nextUrl.pathname.startsWith('/api/auth')) {
    const response = NextResponse.next();
    
    // Add CORS headers for auth endpoints
    response.headers.set('Access-Control-Allow-Origin', '*');
    response.headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    
    // Handle OPTIONS requests (preflight requests)
    if (req.method === 'OPTIONS') {
      return new NextResponse(null, { 
        status: 200,
        headers: response.headers
      });
    }
    
    return response;
  }
  
  // Start with default response for non-auth routes
  const response = NextResponse.next();
    
    // ------------------------------------------------------------
    // Security Headers Implementation - Enterprise Grade
    // ------------------------------------------------------------
    
    // Prevent clickjacking attacks
    response.headers.set('X-Frame-Options', 'DENY');
    
    // Prevent MIME type sniffing security risks
    response.headers.set('X-Content-Type-Options', 'nosniff');
    
    // Control referrer information
    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
    
    // Restrict browser features
    response.headers.set(
      'Permissions-Policy', 
      'camera=(), microphone=(), geolocation=(), interest-cohort=()'
    );
    
    // Prevent XSS attacks with Content-Security-Policy
    const cspDirectives = [
      "default-src 'self'",
      "script-src 'self' 'unsafe-inline' https://analytics.arco.com https://vercel.live",
      "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
      "font-src 'self' https://fonts.gstatic.com",
      "img-src 'self' data: https://*.arco.com blob:",
      "connect-src 'self' https://api.arco.com https://analytics.arco.com",
      "frame-ancestors 'none'",
      "base-uri 'self'",
      "form-action 'self'",
    ].join('; ');
    
    response.headers.set('Content-Security-Policy', cspDirectives);
    
    // Add HSTS header in production
    if (process.env.NODE_ENV === 'production') {
      response.headers.set(
        'Strict-Transport-Security', 
        'max-age=63072000; includeSubDomains; preload'
      );
    }
    
    // Add cache control for authenticated routes
    response.headers.set('Cache-Control', 'private, no-store, max-age=0, must-revalidate');
    
    // ------------------------------------------------------------
    // Activity and Security Logging (implement in production)
    // ------------------------------------------------------------
    const { pathname } = req.nextUrl;
    const token = req.cookies.get('__Secure-next-auth.session-token');
    
    if (process.env.NODE_ENV === 'development') {
      console.log(`[Middleware] Access to ${pathname} ${token ? '(Authenticated)' : '(Unauthenticated)'}`);
    }
    
    // In production: log access patterns, unusual behavior, etc.
    
    return response;
  },
  {
    callbacks: {
      /**
       * Enterprise-grade authorization checks with granular role-based permissions
       */
      authorized({ token, req }) {
        const path = req.nextUrl.pathname;
        
        // Validate token integrity (prevent session hijacking)
        if (token && (!token.id || !token.role)) {
          console.warn('Invalid token structure detected');
          return false;
        }
        
        // ------------------------------------------------------------
        // Role-based Permission Controls
        // ------------------------------------------------------------
        
        // Admin-only sections
        if (path.startsWith('/dashboard/admin')) {
          return token?.role === 'admin';
        }
        
        // Analytics routes - managers and admins only
        if (path.startsWith('/dashboard/analytics')) {
          return token?.role === 'admin' || token?.role === 'manager';
        }
        
        // Client-specific routes
        if (path.startsWith('/dashboard/clients')) {
          return token?.role === 'admin' || token?.role === 'manager' || token?.role === 'client';
        }
        
        // User profile routes - allow the owner or admins only
        if (path.startsWith('/dashboard/profile/') && token?.id) {
          const profileId = path.split('/').pop();
          return token.id === profileId || token.role === 'admin';
        }
        
        // For all other dashboard routes, require authentication with valid role
        return !!token && !!token.role;
      },
    },
    pages: {
      signIn: '/auth/login',
      error: '/auth/error',
    },  }
);

// Configure which routes should use this middleware
export const config = {
  matcher: [
    '/api/auth/:path*',
    '/dashboard/:path*',
    '/admin/:path*',
  ],
};

/**
 * Apply this middleware to protected routes
 * Expanded to include all secure paths
 */
export const config = {
  matcher: [
    // Dashboard and admin pages
    '/dashboard/:path*',
    
    // Protected API endpoints
    '/api/protected/:path*',
    '/api/dashboard/:path*',
    '/api/admin/:path*',
    
    // User profile pages
    '/profile/:path*',
  ],
};
