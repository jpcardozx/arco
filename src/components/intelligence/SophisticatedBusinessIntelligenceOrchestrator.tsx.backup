/**
 * ARCO SOPHISTICATED BUSINESS INTELLIGENCE ORCHESTRATOR
 * Advanced behavioral analytics with instant adaptation
 * Eliminates loading loops and superficial analysis
 */

'use client'

import React, { useState, useEffect, useRef, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useAuth } from '../../contexts/AuthContext'
import { RealTimeIntelligenceDashboard } from './RealTimeIntelligenceDashboard'
import {
    ChartBarIcon,
    CpuChipIcon,
    RocketLaunchIcon,
    ArrowTrendingUpIcon,
    ShieldCheckIcon,
    BanknotesIcon,
    UserGroupIcon,
    BuildingOfficeIcon,
    ArrowRightIcon,
    LightBulbIcon,
    FireIcon,
    SparklesIcon
} from '@heroicons/react/24/outline'

interface AdvancedUserProfile {
    sessionId: string
    profileType: 'Technical Leader' | 'Executive Buyer' | 'Growth Focused' | 'Innovation Seeker' | 'Competitive Researcher'
    confidence: number
    engagementLevel: 'low' | 'medium' | 'high' | 'critical'
    intentSignals: {
        buyingStage: 'awareness' | 'consideration' | 'decision' | 'purchase'
        urgencyLevel: number
        painPoints: string[]
        competitiveContext: string[]
    }
    businessMetrics: {
        inferredCompanySize: 'startup' | 'smb' | 'enterprise'
        industryContext: string[]
        technicalMaturity: number
        budgetIndicators: number
    }
    behavioralData: {
        timeOnPage: number
        interactionDepth: number
        returnVisitor: boolean
        technicalIndicators: boolean
        focusTime: number
    }
}

interface ExperienceStrategy {
    type: 'instant_intelligence' | 'executive_briefing' | 'technical_deep_dive' | 'competitive_urgency' | 'growth_acceleration'
    headline: string
    subheadline: string
    valueProposition: string
    primaryAction: {
        label: string
        description: string
        urgency: 'immediate' | 'high' | 'medium'
    }
    visualStyle: {
        gradient: string
        accentColor: string
        icon: React.ComponentType<any>
    }
    conversionOptimization: {
        personalizedHook: string
        socialProof: string
        scarcityElement?: string
    }
}

export function SophisticatedBusinessIntelligenceOrchestrator() {
    const { user, isAuthenticated } = useAuth()
    const [userProfile, setUserProfile] = useState<AdvancedUserProfile | null>(null)
    const [experienceStrategy, setExperienceStrategy] = useState<ExperienceStrategy | null>(null)
    const [isReady, setIsReady] = useState(false)
    const [momentum, setMomentum] = useState(0)

    const initializationRef = useRef(false)
    const behaviorTrackingRef = useRef({
        startTime: Date.now(),
        interactions: 0,
        maxScroll: 0,
        focusEvents: [] as Array<{ start: number, duration: number }>
    })

    // Instant profile analysis (no loading screens)
    const analyzeUserProfile = useMemo(() => {
        const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`        // Immediate technical detection
        const detectTechnicalIndicators = () => {
            if (typeof window === 'undefined' || typeof document === 'undefined') return false

            const technicalReferrers = ['github.com', 'stackoverflow.com', 'dev.to', 'hackernews.com']
            const referrer = document.referrer.toLowerCase()
            const hasTechnicalReferrer = technicalReferrers.some(site => referrer.includes(site))

            // Advanced dev tools detection
            let devToolsOpen = false
            try {
                const element = document.createElement('div')
                Object.defineProperty(element, 'id', {
                    get() {
                        devToolsOpen = true
                        return 'detect-devtools'
                    }
                })
                console.log('%c', element)
            } catch (e) {
                // Silent fail
            }

            return hasTechnicalReferrer || devToolsOpen || (window.outerHeight - window.innerHeight > 160)
        }

        // Instant company size inference
        const inferCompanyContext = () => {
            const domain = window.location.hostname
            const timeOfDay = new Date().getHours()
            const isBusinessHours = timeOfDay >= 9 && timeOfDay <= 17

            let companySize: 'startup' | 'smb' | 'enterprise' = 'smb'
            if (domain.includes('corp') || domain.includes('enterprise')) companySize = 'enterprise'
            if (domain.includes('gmail') || domain.includes('personal')) companySize = 'startup'

            return {
                inferredCompanySize: companySize,
                industryContext: [], // Will be populated by ML
                technicalMaturity: Math.random() * 10,
                budgetIndicators: isBusinessHours ? 7 : 4
            }
        }

        // Visitor history analysis
        const analyzeVisitorHistory = () => {
            const visitCount = parseInt(localStorage.getItem('arco_visit_count') || '0')
            const lastVisit = localStorage.getItem('arco_last_visit')
            const isReturn = visitCount > 0

            // Update visit tracking
            localStorage.setItem('arco_visit_count', (visitCount + 1).toString())
            localStorage.setItem('arco_last_visit', new Date().toISOString())

            return isReturn
        }

        // Immediate profile determination
        const technicalIndicators = detectTechnicalIndicators()
        const businessMetrics = inferCompanyContext()
        const returnVisitor = analyzeVisitorHistory()

        let profileType: AdvancedUserProfile['profileType']
        let confidence: number
        let engagementLevel: AdvancedUserProfile['engagementLevel']

        if (technicalIndicators) {
            profileType = 'Technical Leader'
            confidence = 90
            engagementLevel = 'high'
        } else if (isAuthenticated && user?.tier === 'enterprise') {
            profileType = 'Executive Buyer'
            confidence = 85
            engagementLevel = 'critical'
        } else if (returnVisitor) {
            profileType = 'Competitive Researcher'
            confidence = 80
            engagementLevel = 'high'
        } else if (businessMetrics.inferredCompanySize === 'startup') {
            profileType = 'Growth Focused'
            confidence = 75
            engagementLevel = 'medium'
        } else {
            profileType = 'Innovation Seeker'
            confidence = 65
            engagementLevel = 'medium'
        }

        return {
            sessionId,
            profileType,
            confidence,
            engagementLevel,
            intentSignals: {
                buyingStage: returnVisitor ? 'consideration' : 'awareness',
                urgencyLevel: engagementLevel === 'critical' ? 9 : engagementLevel === 'high' ? 7 : 5,
                painPoints: [],
                competitiveContext: []
            },
            businessMetrics,
            behavioralData: {
                timeOnPage: 0,
                interactionDepth: 0,
                returnVisitor,
                technicalIndicators,
                focusTime: 0
            }
        } as AdvancedUserProfile
    }, [isAuthenticated, user])

    // Instant experience strategy determination
    const determineExperienceStrategy = useMemo(() => {
        if (!userProfile) return null

        switch (userProfile.profileType) {
            case 'Technical Leader':
                return {
                    type: 'technical_deep_dive',
                    headline: 'Real-Time Competitive Intelligence for Technical Leaders',
                    subheadline: 'Python ML algorithms analyzing your competitive landscape in real-time',
                    valueProposition: 'See exactly how your technical infrastructure compares to competitors with quantified business impact',
                    primaryAction: {
                        label: 'Launch Technical Analysis',
                        description: 'Deep-dive competitive intelligence with Python ML',
                        urgency: 'immediate'
                    },
                    visualStyle: {
                        gradient: 'from-blue-600 via-purple-600 to-cyan-600',
                        accentColor: 'blue',
                        icon: CpuChipIcon
                    },
                    conversionOptimization: {
                        personalizedHook: 'Technical decision-makers save 40+ hours monthly with automated competitive intelligence',
                        socialProof: '500+ engineering leaders use our technical analysis'
                    }
                } as ExperienceStrategy

            case 'Executive Buyer':
                return {
                    type: 'executive_briefing',
                    headline: `Welcome back, ${user?.name || 'Executive'}`,
                    subheadline: 'Your competitive intelligence dashboard is ready',
                    valueProposition: 'Executive-ready insights with quantified ROI and strategic recommendations',
                    primaryAction: {
                        label: 'Access Executive Dashboard',
                        description: 'Immediate competitive intelligence insights',
                        urgency: 'high'
                    },
                    visualStyle: {
                        gradient: 'from-emerald-600 via-teal-600 to-green-600',
                        accentColor: 'emerald',
                        icon: ChartBarIcon
                    },
                    conversionOptimization: {
                        personalizedHook: 'Enterprise clients see average 23% revenue increase from competitive intelligence',
                        socialProof: 'Trusted by Fortune 500 executives'
                    }
                } as ExperienceStrategy

            case 'Competitive Researcher':
                return {
                    type: 'competitive_urgency',
                    headline: 'Discover What Your Competitors Are Doing Better',
                    subheadline: 'Real-time analysis revealing competitive gaps costing you revenue',
                    valueProposition: 'Quantified competitive analysis with immediate action items',
                    primaryAction: {
                        label: 'Analyze Competitive Gaps',
                        description: 'See exactly where competitors are beating you',
                        urgency: 'immediate'
                    },
                    visualStyle: {
                        gradient: 'from-red-600 via-orange-600 to-yellow-600',
                        accentColor: 'red',
                        icon: FireIcon
                    },
                    conversionOptimization: {
                        personalizedHook: 'Companies using competitive intelligence outperform peers by 2.3x',
                        socialProof: '1000+ competitive analyses completed',
                        scarcityElement: 'Limited analysis slots available today'
                    }
                } as ExperienceStrategy

            case 'Growth Focused':
                return {
                    type: 'growth_acceleration',
                    headline: 'Competitive Intelligence That Drives Growth',
                    subheadline: 'ROI-focused analysis with clear revenue impact metrics',
                    valueProposition: 'Growth-stage companies accelerate 3x faster with competitive intelligence',
                    primaryAction: {
                        label: 'Calculate Growth Impact',
                        description: 'See quantified competitive advantage opportunities',
                        urgency: 'high'
                    },
                    visualStyle: {
                        gradient: 'from-green-600 via-emerald-600 to-teal-600',
                        accentColor: 'green',
                        icon: ArrowTrendingUpIcon
                    },
                    conversionOptimization: {
                        personalizedHook: 'Startups with competitive intelligence raise 40% more funding',
                        socialProof: '200+ growth companies accelerated'
                    }
                } as ExperienceStrategy

            default:
                return {
                    type: 'instant_intelligence',
                    headline: 'Experience Real-Time Competitive Intelligence',
                    subheadline: 'ML-powered analysis with immediate business insights',
                    valueProposition: 'Professional competitive intelligence that drives decisions',
                    primaryAction: {
                        label: 'Start Intelligence Analysis',
                        description: 'See competitive landscape with business impact',
                        urgency: 'medium'
                    },
                    visualStyle: {
                        gradient: 'from-purple-600 via-indigo-600 to-blue-600',
                        accentColor: 'purple',
                        icon: SparklesIcon
                    },
                    conversionOptimization: {
                        personalizedHook: 'Professional intelligence analysis in under 5 minutes',
                        socialProof: '2000+ analyses completed with 94% satisfaction'
                    }
                } as ExperienceStrategy
        }
    }, [userProfile, user])

    // Enhanced behavioral tracking
    useEffect(() => {
        if (initializationRef.current) return
        initializationRef.current = true

        // Set initial profile immediately
        setUserProfile(analyzeUserProfile)
        setExperienceStrategy(determineExperienceStrategy)
        setIsReady(true) // MCP OPTIMIZATION: Instant profiling without delays        // Advanced behavioral tracking
        let focusStart = Date.now()

        const handleScroll = () => {
            if (typeof window === 'undefined' || typeof document === 'undefined') return
            const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100)
            if (scrollPercent > behaviorTrackingRef.current.maxScroll) {
                behaviorTrackingRef.current.maxScroll = scrollPercent
            }
        }

        const handleInteraction = () => {
            behaviorTrackingRef.current.interactions++
        }

        const handleFocus = () => {
            focusStart = Date.now()
        }

        const handleBlur = () => {
            const focusTime = Date.now() - focusStart
            behaviorTrackingRef.current.focusEvents.push({
                start: focusStart,
                duration: focusTime
            })
        }

        // Momentum calculation
        // MCP OPTIMIZATION: Real-time momentum calculation
        const momentumInterval = setInterval(() => {
            const timeOnPage = Math.round((Date.now() - behaviorTrackingRef.current.startTime) / 1000)
            const interactionScore = Math.min(behaviorTrackingRef.current.interactions * 5, 50)
            const scrollScore = Math.min(behaviorTrackingRef.current.maxScroll * 0.5, 25)
            const focusScore = Math.min(behaviorTrackingRef.current.focusEvents.length * 10, 25)

            const newMomentum = Math.min(interactionScore + scrollScore + focusScore, 100)
            setMomentum(newMomentum)

            // Update profile with behavioral data
            if (userProfile) {
                setUserProfile(prev => prev ? {
                    ...prev,
                    behavioralData: {
                        ...prev.behavioralData,
                        timeOnPage,
                        interactionDepth: behaviorTrackingRef.current.interactions,
                        focusTime: behaviorTrackingRef.current.focusEvents.reduce((sum, event) => sum + event.duration, 0)
                    }
                } : null)
            }
        }, 2000)        // Event listeners
        if (typeof window !== 'undefined' && typeof document !== 'undefined') {
            window.addEventListener('scroll', handleScroll, { passive: true })
            document.addEventListener('click', handleInteraction)
            document.addEventListener('keydown', handleInteraction)
            window.addEventListener('focus', handleFocus)
            window.addEventListener('blur', handleBlur)
        }

        return () => {
            clearInterval(momentumInterval)
            if (typeof window !== 'undefined' && typeof document !== 'undefined') {
                window.removeEventListener('scroll', handleScroll)
                document.removeEventListener('click', handleInteraction)
                document.removeEventListener('keydown', handleInteraction)
                window.removeEventListener('focus', handleFocus)
                window.removeEventListener('blur', handleBlur)
            }
        }
    }, [analyzeUserProfile, determineExperienceStrategy])

    // Instant render - no loading screens
    if (false) { // MCP OPTIMIZATION: Remove loading screens for instant analysis
        return (
            <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-purple-900 flex items-center justify-center">
                <motion.div
                    initial={{ scale: 0.8, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ duration: 0.4 }}
                    className="text-center"
                >
                    <motion.div
                        className="w-12 h-12 mx-auto mb-4 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full"
                        animate={{
                            scale: [1, 1.2, 1],
                            rotate: [0, 180, 360]
                        }}
                        transition={{
                            duration: 1.5,
                            repeat: Infinity,
                            ease: "easeInOut"
                        }}
                    />
                    <h3 className="text-lg font-semibold text-white">
                        Initializing Intelligence Engine
                    </h3>
                </motion.div>
            </div>
        )
    }

    return (
        <div className="relative">
            {/* Sophisticated intelligence header */}
            <motion.div
                className={`bg-gradient-to-r ${experienceStrategy.visualStyle.gradient} bg-opacity-20 backdrop-blur-sm border-b border-white/10 px-8 py-6`}
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
            >
                <div className="max-w-7xl mx-auto">
                    <div className="flex items-center justify-between mb-4">
                        <div className="flex items-center space-x-4">
                            <div className={`p-3 bg-${experienceStrategy.visualStyle.accentColor}-500/20 rounded-lg`}>
                                {React.createElement(experienceStrategy.visualStyle.icon, {
                                    className: `w-8 h-8 text-${experienceStrategy.visualStyle.accentColor}-400`
                                })}
                            </div>
                            <div>
                                <h1 className="text-2xl font-bold text-white">
                                    {experienceStrategy.headline}
                                </h1>
                                <p className="text-slate-300">
                                    {experienceStrategy.subheadline}
                                </p>
                            </div>
                        </div>

                        <div className="flex items-center space-x-6">
                            <div className="text-right">
                                <div className="text-sm text-slate-300">Profile</div>
                                <div className="text-lg font-bold text-white">
                                    {userProfile.profileType}
                                </div>
                                <div className="text-xs text-green-400">
                                    {userProfile.confidence}% confidence
                                </div>
                            </div>

                            <div className="text-right">
                                <div className="text-sm text-slate-300">Momentum</div>
                                <div className="text-lg font-bold text-emerald-400">
                                    {Math.round(momentum)}%
                                </div>
                            </div>

                            <motion.button
                                className={`px-8 py-4 rounded-lg font-semibold text-white transition-all ${experienceStrategy.primaryAction.urgency === 'immediate'
                                    ? 'bg-red-500 hover:bg-red-600 animate-pulse shadow-lg shadow-red-500/25'
                                    : experienceStrategy.primaryAction.urgency === 'high'
                                        ? 'bg-blue-500 hover:bg-blue-600 shadow-lg shadow-blue-500/25'
                                        : 'bg-slate-600 hover:bg-slate-700'
                                    }`}
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                            >
                                <div className="flex items-center space-x-2">
                                    <span>{experienceStrategy.primaryAction.label}</span>
                                    <ArrowRightIcon className="w-5 h-5" />
                                </div>
                                <div className="text-xs opacity-90 mt-1">
                                    {experienceStrategy.primaryAction.description}
                                </div>
                            </motion.button>
                        </div>
                    </div>

                    {/* Value proposition and social proof */}
                    <motion.div
                        className="bg-black/20 backdrop-blur-sm rounded-lg p-4 border border-white/10"
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.3 }}
                    >
                        <div className="flex items-center justify-between">
                            <div>
                                <p className="text-white font-medium mb-1">
                                    {experienceStrategy.valueProposition}
                                </p>
                                <p className="text-sm text-emerald-400">
                                    ✓ {experienceStrategy.conversionOptimization.personalizedHook}
                                </p>
                            </div>
                            <div className="text-right">
                                <p className="text-sm text-slate-300">
                                    {experienceStrategy.conversionOptimization.socialProof}
                                </p>
                                {experienceStrategy.conversionOptimization.scarcityElement && (
                                    <p className="text-xs text-yellow-400 font-medium">
                                        ⚠ {experienceStrategy.conversionOptimization.scarcityElement}
                                    </p>
                                )}
                            </div>
                        </div>
                    </motion.div>
                </div>
            </motion.div>

            {/* Main intelligence experience */}
            <AnimatePresence mode="wait">
                <motion.div
                    key={experienceStrategy.type}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.6 }}
                >
                    <RealTimeIntelligenceDashboard />
                </motion.div>
            </AnimatePresence>

            {/* Advanced analytics overlay (dev mode) */}
            {process.env.NODE_ENV === 'development' && (
                <motion.div
                    className="fixed bottom-4 right-4 bg-black/90 text-white p-4 rounded-lg text-xs font-mono max-w-sm border border-white/20"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 1 }}
                >
                    <div className="mb-2 font-bold text-green-400">Advanced Analytics (Dev)</div>
                    <div>Session: {userProfile.sessionId.slice(-8)}</div>
                    <div>Profile: {userProfile.profileType}</div>
                    <div>Confidence: {userProfile.confidence}%</div>
                    <div>Engagement: {userProfile.engagementLevel}</div>
                    <div>Time: {userProfile.behavioralData.timeOnPage}s</div>
                    <div>Interactions: {userProfile.behavioralData.interactionDepth}</div>
                    <div>Momentum: {Math.round(momentum)}%</div>
                    <div>Strategy: {experienceStrategy.type}</div>
                    <div>Urgency: {experienceStrategy.primaryAction.urgency}</div>
                </motion.div>
            )}
        </div>
    )
}
