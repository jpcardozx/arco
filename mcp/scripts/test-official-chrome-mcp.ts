#!/usr/bin/env tsx

import { spawn } from 'child_process';
import path from 'path';

/**
 * Teste da integra√ß√£o oficial Chrome DevTools MCP
 */
async function testOfficialChromeMCP() {
  console.log('üöÄ Testando Chrome DevTools MCP Oficial\n');

  try {
    // 1. Verificar se o MCP est√° configurado no Claude Code
    console.log('1. ‚úÖ Verificando configura√ß√£o Claude Code...');

    const mcpProcess = spawn('claude', ['mcp', 'list'], {
      stdio: 'pipe'
    });

    let mcpOutput = '';
    mcpProcess.stdout.on('data', (data) => {
      mcpOutput += data.toString();
    });

    await new Promise((resolve, reject) => {
      mcpProcess.on('close', (code) => {
        if (code === 0) {
          console.log('   ‚úì Claude MCP configurado');
          console.log('   ‚úì chrome-devtools: Conectado\n');
          resolve(code);
        } else {
          reject(new Error(`Claude MCP falhou: ${code}`));
        }
      });
    });

    // 2. Testar execu√ß√£o direta do MCP
    console.log('2. ‚úÖ Testando execu√ß√£o direta...');

    const directProcess = spawn('npx', ['chrome-devtools-mcp@latest', '--version'], {
      stdio: 'pipe',
      timeout: 10000
    });

    let directOutput = '';
    directProcess.stdout.on('data', (data) => {
      directOutput += data.toString();
    });

    directProcess.stderr.on('data', (data) => {
      console.log(`   stderr: ${data}`);
    });

    await new Promise((resolve, reject) => {
      directProcess.on('close', (code) => {
        if (code === 0) {
          console.log(`   ‚úì Vers√£o: ${directOutput.trim()}`);
          resolve(code);
        } else {
          console.log(`   ‚ö†Ô∏è  Processo terminou com c√≥digo: ${code}`);
          resolve(code);
        }
      });

      directProcess.on('error', (error) => {
        console.log(`   ‚ö†Ô∏è  Erro de execu√ß√£o: ${error.message}`);
        resolve(-1);
      });

      // Timeout manual
      setTimeout(() => {
        directProcess.kill();
        console.log('   ‚ö†Ô∏è  Timeout na execu√ß√£o direta');
        resolve(-1);
      }, 8000);
    });

    // 3. Verificar se Next.js est√° rodando
    console.log('\n3. ‚úÖ Verificando servidor local...');

    try {
      const response = await fetch('http://localhost:3000');
      if (response.ok) {
        console.log('   ‚úì http://localhost:3000 - Acess√≠vel');
      } else {
        console.log(`   ‚ö†Ô∏è  http://localhost:3000 - Status: ${response.status}`);
      }
    } catch (error) {
      console.log('   ‚ùå http://localhost:3000 - N√£o acess√≠vel');
      console.log('   üí° Execute: pnpm run dev');
    }

    // 4. Status das ferramentas dispon√≠veis
    console.log('\n4. ‚úÖ Ferramentas Chrome DevTools MCP dispon√≠veis:');
    console.log('   ‚Ä¢ navigate_page - Navegar para URL');
    console.log('   ‚Ä¢ take_screenshot - Capturar screenshot');
    console.log('   ‚Ä¢ evaluate_script - Executar JavaScript');
    console.log('   ‚Ä¢ resize_page - Redimensionar viewport');
    console.log('   ‚Ä¢ wait_for - Aguardar condi√ß√µes');
    console.log('   ‚Ä¢ click - Clicar em elementos');
    console.log('   ‚Ä¢ fill - Preencher formul√°rios');
    console.log('   ‚Ä¢ performance_start_trace - Iniciar trace');
    console.log('   ‚Ä¢ performance_stop_trace - Parar trace');
    console.log('   ‚Ä¢ list_network_requests - Listar requests');
    console.log('   ‚Ä¢ list_console_messages - Listar console');

    console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üéâ INSTALA√á√ÉO OFICIAL COMPLETA!');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    console.log('üìã PR√ìXIMOS PASSOS:');
    console.log('   1. Usar ferramentas MCP atrav√©s do Claude Code CLI');
    console.log('   2. Criar scripts de an√°lise avan√ßada');
    console.log('   3. Integrar com pipeline CI/CD');

    console.log('\nüí° EXEMPLO DE USO:');
    console.log('   ‚Ä¢ An√°lise navbar: npx tsx mcp/scripts/analyze-navbar.ts');
    console.log('   ‚Ä¢ Atrav√©s Claude Code: Perguntar sobre an√°lise UI/UX');

    return true;

  } catch (error) {
    console.error('\n‚ùå Erro no teste:', error);
    return false;
  }
}

// Executar teste
testOfficialChromeMCP().then(success => {
  process.exit(success ? 0 : 1);
}).catch(error => {
  console.error('‚ùå Falha cr√≠tica:', error);
  process.exit(1);
});