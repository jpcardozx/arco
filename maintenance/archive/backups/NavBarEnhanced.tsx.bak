'use client';

import { motion, AnimatePresence } from 'framer-motion';
import { Menu, X, ChevronDown } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { useState, useEffect } from 'react';

import React from "react";
import { LanguageSwitcher } from '@/components/features/language-switcher';
import { useTranslation } from '@/lib/context/i18n-context';

export default function NavBarEnhanced() {
  const { t } = useTranslation();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const [openDropdown, setOpenDropdown] = useState<string | null>(null);

  // Define nav items using translations
  const navItems = [
    { label: t('common.navigation.process'), href: '#process' },
    { label: t('common.navigation.results'), href: '#case-studies' },
    {
      label: t('common.navigation.solutions'),
      href: '#',
      dropdown: [
        { label: 'ArcSight Snapshot™', href: '/diagnose' },
        { label: 'Friction Removal Kit™', href: '/solutions' },
        { label: 'Strategic Repositioning™', href: '/solutions' },
      ],
    },
    { label: t('common.navigation.blog'), href: '/blog' },
  ];

  // Detect scroll for conditional styling
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleDropdownToggle = (label: string) => {
    setOpenDropdown(openDropdown === label ? null : label);
  };

  return (
    <>
      <header
        className={`fixed left-0 right-0 top-0 z-50 transition-all duration-300 ${
          scrolled
            ? 'border-b border-neutral-200 bg-white/90 py-2 backdrop-blur-md dark:border-neutral-800 dark:bg-neutral-900/90'
            : 'bg-transparent py-4'
        }`}
      >
        <div className="container mx-auto px-4 md:px-6">
          <div className="flex items-center justify-between">
            {/* Logo */}
            <Link href="/" className="flex shrink-0 items-center">
              <Image
                src="/logo-v2.svg"
                alt="ARCO"
                width={110}
                height={40}
                className={`transition-all ${scrolled ? 'opacity-100' : 'opacity-95'}`}
              />
            </Link>

            {/* Desktop Navigation */}
            <div className="hidden items-center gap-1 md:flex">
              {navItems.map(item => (
                <div key={item.label} className="group relative">
                  {item.dropdown ? (
                    <button
                      onClick={() => handleDropdownToggle(item.label)}
                      className={`flex items-center px-3 py-2 text-sm font-medium ${
                        scrolled
                          ? 'text-neutral-800 hover:text-neutral-950 dark:text-neutral-200 dark:hover:text-white'
                          : 'text-white hover:text-white/90'
                      } rounded-md transition-colors`}
                    >
                      {item.label}
                      <ChevronDown
                        size={16}
                        className={`ml-1 transition-transform ${
                          openDropdown === item.label ? 'rotate-180' : ''
                        }`}
                      />
                    </button>
                  ) : (
                    <Link
                      href={item.href}
                      className={`px-3 py-2 text-sm font-medium ${
                        scrolled
                          ? 'text-neutral-800 hover:text-neutral-950 dark:text-neutral-200 dark:hover:text-white'
                          : 'text-white hover:text-white/90'
                      } rounded-md transition-colors`}
                    >
                      {item.label}
                    </Link>
                  )}

                  {/* Dropdown */}
                  {item.dropdown && (
                    <AnimatePresence>
                      {openDropdown === item.label && (
                        <motion.div
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: 5 }}
                          transition={{ duration: 0.15 }}
                          className="absolute left-0 z-20 mt-1 w-56 overflow-hidden rounded-lg border border-neutral-200 bg-white shadow-lg dark:border-neutral-700 dark:bg-neutral-800"
                        >
                          <div className="py-2">
                            {item.dropdown.map(subItem => (
                              <Link
                                key={subItem.label}
                                href={subItem.href}
                                className="flex items-center px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-100 dark:text-neutral-200 dark:hover:bg-neutral-700"
                                onClick={() => setOpenDropdown(null)}
                              >
                                {subItem.label}
                              </Link>
                            ))}
                          </div>
                        </motion.div>
                      )}
                    </AnimatePresence>
                  )}
                </div>
              ))}

              {/* Language switcher */}
              <div className="ml-3 mr-4">
                <LanguageSwitcher displayStyle="minimal" />
              </div>

              {/* CTA Button */}
              <Link
                href="/diagnose"
                className={`rounded-md px-4 py-2 text-sm font-medium ${
                  scrolled
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : 'bg-white text-neutral-900 hover:bg-neutral-100'
                } transition-colors`}
              >
                {t('common.buttons.getStarted')}
              </Link>
            </div>

            {/* Mobile Menu Toggle */}
            <button
              type="button"
              className="rounded-md p-2 md:hidden"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              aria-label="Toggle menu"
            >
              {isMenuOpen ? (
                <X
                  size={24}
                  className={scrolled ? 'text-neutral-900 dark:text-white' : 'text-white'}
                />
              ) : (
                <Menu
                  size={24}
                  className={scrolled ? 'text-neutral-900 dark:text-white' : 'text-white'}
                />
              )}
            </button>
          </div>
        </div>
      </header>

      {/* Mobile Menu */}
      <AnimatePresence>
        {isMenuOpen && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.2 }}
            className="fixed left-0 right-0 top-16 z-40 border-b border-neutral-200 bg-white shadow-lg md:hidden dark:border-neutral-800 dark:bg-neutral-900"
          >
            <div className="space-y-4 px-4 py-6">
              <div className="flex flex-col space-y-2">
                {navItems.map(item => (
                  <div key={item.label} className="py-1">
                    {item.dropdown ? (
                      <div>
                        <button
                          onClick={() => handleDropdownToggle(item.label)}
                          className="flex w-full items-center justify-between py-2 font-medium text-neutral-800 dark:text-white"
                        >
                          <span>{item.label}</span>
                          <ChevronDown
                            size={18}
                            className={`transition-transform ${
                              openDropdown === item.label ? 'rotate-180' : ''
                            }`}
                          />
                        </button>

                        <AnimatePresence>
                          {openDropdown === item.label && (
                            <motion.div
                              initial={{ opacity: 0, height: 0 }}
                              animate={{ opacity: 1, height: 'auto' }}
                              exit={{ opacity: 0, height: 0 }}
                              transition={{ duration: 0.2 }}
                              className="ml-2 mt-2 space-y-2 border-l-2 border-neutral-200 pl-4 dark:border-neutral-700"
                            >
                              {item.dropdown.map(subItem => (
                                <Link
                                  key={subItem.label}
                                  href={subItem.href}
                                  className="block py-2 text-neutral-700 hover:text-neutral-900 dark:text-neutral-200 dark:hover:text-white"
                                  onClick={() => setIsMenuOpen(false)}
                                >
                                  {subItem.label}
                                </Link>
                              ))}
                            </motion.div>
                          )}
                        </AnimatePresence>
                      </div>
                    ) : (
                      <Link
                        href={item.href}
                        className="block py-2 font-medium text-neutral-800 hover:text-neutral-900 dark:text-white"
                        onClick={() => setIsMenuOpen(false)}
                      >
                        {item.label}
                      </Link>
                    )}
                  </div>
                ))}
              </div>

              <div className="pb-2 pt-4">
                <div className="mb-4">
                  <LanguageSwitcher displayStyle="full" position="horizontal" />
                </div>
                <Link
                  href="/diagnose"
                  className="block w-full rounded-md bg-blue-600 px-4 py-2 text-center text-white transition-colors hover:bg-blue-700"
                  onClick={() => setIsMenuOpen(false)}
                >
                  {t('common.buttons.getStarted')}
                </Link>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}
